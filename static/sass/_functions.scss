/*
 * Functional mixins – Items we would like to keep consistent from project to project
 */

/* Turn numbers with units into unitless numbers: https://github.com/nex3/sass/issues/533 */
@function clear-units($value){
    
    @if type-of($value) == "number" {
        @if (unitless($value)) {
            @return $value;
        } @else if unit($value) == "em"{
            @return $value / 1em;
        } @else if unit($value) == "px" {
            @return $value / 1px;
        } @else if unit($value) == "pt" {
            @return $value / 1pt;
        }
    } @else {
        @warn "Not a number value: #{$value}";
        @return $value;
    }
}

@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}
/* NOTE: Neither of these work on units with decimal points. */


/* Easy little function to do the math of pixel to EM conversion for us. Needs a base-font-size set in _base.scss */
@function px2em( $pixel, $base-size:$base-font-size ) {
    /* Remove units for easier math. We are converting to EMs anyway */
    $pixel: clear-units($pixel); 
    $base-size: clear-units($base-size); 
    @return #{$pixel / $base-size}em;
}


/* Shorthand for a set of useful text/line-height resizing functions. easier to remember... */
@mixin adjust-font-size( $font_size, $line_height:$font_size ) {
	@include adjust-font-size-to( $font_size, lines-for-font-size( $line_height ) );
}


/* 
 * Font-size-adjust: the problem and a solution
 * Not widely supported, can't use this yet */
@mixin font-size-adjust {
    -webkit-font-size-adjust: 0.465; /* No support yet */
    font-size-adjust: 0.465; /* Firefox only */
}

/* Since we can't use the above, let's create our own way to do it. */
@mixin fontface-adjust( $pixel, $base-size:$base-font-size, $adjust-value: $font-size-adjust-value ) {
    @if $adjust-value == none {
        $adjust-value: 1; 
    }
    $pixel: clear-units($pixel); 
    $base-size: clear-units($base-size); 
    
    font-size: #{$pixel / $base-size}em;
    
    .fontface & {
        font-size: #{$pixel * $adjust-value / $base-size}em;
        
        span:before {
            font-size: .875em; 
        }
    }
}


/* Quickly apply border styles to elements */
@mixin pe-border( $width: 1px, $style: solid, $color-top: none, $color-right: none, $color-bottom: none, $color-left: none ) {
    @if $color-top != none
        { border-top: $width $style $color-top; }
    @if $color-right != none
        { border-right: $width $style $color-right; }
    @if $color-bottom != none
        { border-bottom: $width $style $color-bottom; }
    @if $color-left != none
        { border-left: $width $style $color-left; }
}


/* Talk of depreciating the Compass mixin, so we pull it in here and make small adjustments */
@mixin pe-inline-block( $alignment: $inline-block-alignment ) {
    @if $legacy-support-for-mozilla
        { display: -moz-inline-stack; }
    display: inline-block;
    @if $alignment and $alignment != none
        { vertical-align: $alignment; }
    @if $legacy-support-for-ie {
        .lt-ie8 & {
            vertical-align: auto; 
            zoom: 1; 
            display: inline; 
        }
    }
}


/* Namespace the box-sizing mixin so we can add support (a polyfill?) for IE6/7 */
@mixin pe-box-sizing( $sizing: border-box ) {
    @include box-sizing( $sizing ); 
}


/* Vertical and Horizontal gradient mixins to make things easier. */
@mixin vertical-gradient( $top-color, $bottom-color, $top-percent:10%, $bottom-percent:90% ) {
    background-color: $bottom-color; 
    @include filter-gradient( $top-color, $bottom-color, vertical ); 
    @include background-image( linear-gradient( $top-color $top-percent, $bottom-color $bottom-percent ) );
}

@mixin horiz-gradient( $left-color, $right-color, $left-percent:10%, $right-percent:90% ) {
    background-color: $left-color; 
    @include filter-gradient( $left-color, $right-color, horizontal ); 
    @include background-image( linear-gradient( $left-color $left-percent, $right-color $right-percent ) );
}

@mixin reset-gradient ( $flat-color ) {
    background-color: $flat-color; 
    filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);
    background-image: none; 
}


/* 
 * Set all the up-and-coming input text types here for easier reference 
 * Does not include types that are not meant to be displayed full width, such as: 
        type=number, type=range, type=date, type=color
 * Usage: @include input-text-types() { @content }
 */
@mixin input-text-types( $focus:false ) {
    @if $focus {
      input[type=text]:focus, input[type=password]:focus, input[type=search]:focus, input[type=email]:focus, input[type=url]:focus, input[type=tel]:focus {
        @content;
      }
    } @else {
        input[type=text], input[type=password], input[type=search], input[type=email], input[type=url], input[type=tel] {
          @content;
        }
    }
}


/* 
 * Cross browser @keyframe definition set 
 * Compass doesn't have one yet, so we namespace this so as not to conflict with a future release
 */
@mixin pe-keyframes( $animation-name ) {
    
    @-webkit-keyframes $animation-name {
        @content;
    }
    @-moz-keyframes $animation-name {
        @content;
    }
    @-ms-keyframes $animation-name {
        @content;
    }
    @-o-keyframes $animation-name {
        @content;
    }
    @keyframes $animation-name {
        @content;
    }   
}


/* 
 * Cross browser animation definition set 
 * Compass doesn't have one yet, so we namespace this so as not to conflict with a future release
 * 
 * $timing: linear | ease | ease-in | ease-out | ease-in-out
 * $delay: seconds before animation starts
 * $count: how many times the animation will loop
 * $direction: normal | alternate (Play even-numbered iterations of the animation in the forward direction and odd-numbered iterations in the reverse direction.)
 * $fill-mode: none | forwards | backwards | both
 *      forwards (The animation’s final keyframe continues to apply after the final iteration of the animation completes)
 *      backwards (The animation’s initial keyframe is applied as soon as the animation style is applied to an element. 
 *      This only affects animations that have a nonzero value for -webkit-animation-delay)
 *      both (The animation’s initial keyframe is applied as soon as the animation style is applied to an element, 
 *      and the animation’s final keyframe continues to apply after the final iteration of the animation completes. 
 *      The initial keyframe only affects animations that have a nonzero value for -webkit-animation-delay)
 */
@mixin pe-animation( $name, $duration:1s, $timing:ease, $delay:0, $count:1, $direction:normal, $fill-mode:none ) {
    
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-timing-function: $timing; 
    -webkit-animation-delay: $delay;
    -webkit-animation-iteration-count: $count;
    -webkit-animation-direction: $direction;
    -webkit-animation-fill-mode: $fill-mode;
    -moz-animation-name: $name;
    -moz-animation-duration: $duration;
    -moz-animation-timing-function: $timing; 
    -moz-animation-delay: $delay;
    -moz-animation-iteration-count: $count;
    -moz-animation-direction: $direction;
    -moz-animation-fill-mode: $fill-mode;
    -o-animation-name: $name;
    -o-animation-duration: $duration;
    -o-animation-timing-function: $timing; 
    -o-animation-delay: $delay;
    -o-animation-iteration-count: $count;
    -o-animation-direction: $direction;
    -o-animation-fill-mode: $fill-mode;
    animation-name: $name;
    animation-duration: $duration;
    animation-timing-function: $timing; 
    animation-delay: $delay;
    animation-iteration-count: $count;
    animation-direction: $direction;
    animation-fill-mode: $fill-mode;
}


/* 
 * Cross browser method to apply word-breaking and hyphenation (where supported) 
 * Should be able to use the built-in Compass method, hyphenation(), but the library won't load right now
 */
@mixin pe-hyphenate() {
/*  -ms-word-break: break-all; AWFUL! Surprise... breaks words arbitrarily, not according to hyphenation tables. IE6-8 */
/*   word-break: break-all; Used when we need to break long strings (URLs) in small containers. Use with care. */
/*   word-break: break-word; Non standard for older webkit. Hyphenation tables aren't great, so don't use. */
    -webkit-hyphens: auto;
       -moz-hyphens: auto;
        -ms-hyphens: auto;
         -o-hyphens: auto;
            hyphens: auto;
    
    /* Don't hypenate certain elements... its bad form */
    tt, var, code, kbd, abbr, acronym {
        -webkit-hyphens: none;
           -moz-hyphens: none;
            -ms-hyphens: none;
             -o-hyphens: none;
                hyphens: none;
    }
}

/* Keep this in all mix-in files if you can. Useful stuff */
@mixin no_js_warning {

    #nojs, #oldie-warning {
    	padding: .75em .75em .65em;
    	text-align: center; 
    	background-color: #c33; 
    	
    	p {
    	   color: #e6e6e6;
    	   font-weight: bold; 
    	   margin: 0;
    	}
    	a {
        	color: #e6e6e6; 
        	text-decoration: underline; 
        	
        	&:hover, &:focus {
            	color: #fff; 
            	text-decoration: none; 
        	}
    	}
    }
    #oldie-warning {
        background-color: #ff7; 
        
        p {
            color: #444;
        }
        a {
            color: #444;
            
            &:hover, &:focus {
            	color: #000; 
        	}
        }
    }
    .js #nojs {
        display: none;
    }
}

/* Manage our preferred reset as a Mix-in instead of relying on Compass or Blueprint */
@mixin html5boilerplate_reset {
    
    html, body, div, span, object, iframe,
    h1, h2, h3, h4, h5, h6, p, blockquote, pre,
    abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp,
    small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li,
    fieldset, form, label, legend,
    table, caption, tbody, tfoot, thead, tr, th, td,
    article, aside, canvas, details, figcaption, figure,
    footer, header, hgroup, menu, nav, section, summary,
    time, mark, audio, video {
    	margin: 0;
    	padding: 0;
    	border: 0;
    	font-size: 100%;
    	font: inherit;
    	vertical-align: baseline;
    }
    article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section, form { display: block; }
    blockquote { quotes: none; }
    blockquote:before, blockquote:after { content: ""; content: none; }
        q { display: inline; }
        q:before { content: "“"; }
        q:after { content: "”"; }
        q q:before { content: "‘"; }
        q q:after { content: "’"; }
    ins { background-color: $grey-lighterer; color: $grey-darker; text-decoration: none; }
    mark { display: inline-block; padding: 0 .25em; margin: 0 -.125em; background-color: #ffb; /* light yellow */ }
    s, strike, del { text-decoration: line-through; }
    abbr[title], dfn[title] { /* border-bottom: 1px dotted; */ cursor: help; }
    table { width: 100%; border-collapse: collapse; border-spacing: 0; }
    th, td { text-align: left; vertical-align: top; }
    hr { display: block; height: 1px; border: 0; border-top: 1px solid $grey-lighter; margin: rhythm(1) 0; padding: 0; }
    input, button, select { display: inline-block; vertical-align: middle; cursor: text; }
    
    html {
        font-size: 100%; 
        -webkit-text-size-adjust: 100%; 
        -ms-text-size-adjust: 100%; 
        overflow-y: scroll; 
        -webkit-font-smoothing: antialiased; 
        margin: 0; 
    }
    body { *font-size:small; text-rendering: optimizeSpeed; }
    select, input, textarea, button { font: 99%; -webkit-font-smoothing: antialiased; margin: 0; }
    h1, h2, h3, h4, h5, h6 { font-weight: normal; }
    
    /* Minimal base styles */
    ul, ol { margin-left: 1.5em; }
    	ul { list-style: square; }
    	ol { list-style: decimal; }
    	ol ol { list-style: upper-alpha; }
    	ol ol ol { list-style: lower-roman; }
    	ol ol ol ol { list-style: lower-alpha; }
    nav ul, menu ul, .menu, .tabs { margin-left: 0; list-style: none; list-style-image: none; }
    small { font-size: 85%; }
    b, strong, th { font-weight: 700; }
    i, em, cite { font-style: italic; }
    
    sub, sup { font-size: 75%; line-height: 0; position: relative; }
    sup { top: -0.5em; }
    sub { bottom: -0.25em; }
    
    pre, code, kbd, samp, var { font-family: Consolas, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; }
    pre {  /* Get spaces to display for PRE tags but dont let long lines break out of containers */
    	white-space: pre-wrap; 
    	white-space: -moz-pre-wrap !important;	/* 1999+ Mozilla */
    	white-space: -pre-wrap;					/* Opera 4 thru 6 */
    	white-space: -o-pre-wrap;				/* Opera 7 and up */
    	word-wrap: break-word;					/* IE 5.5+ and up */
    }
    code { color: $code-green; }
    var { font-style: italic; }
    
    textarea { overflow: auto; vertical-align: top; resize: vertical; }
    .ie7 legend { border: 0; padding: 0; white-space: normal;*margin-left: -7px; } 
    input[type="radio"] { vertical-align: text-bottom; }
    input[type="checkbox"] { vertical-align: baseline; }
    .ie7 input[type="checkbox"] { vertical-align: bottom; }
    
    button, input[type="button"], input[type="reset"], input[type="submit"] { 
        cursor: pointer; 
        -webkit-appearance: button; 
        -moz-appearance: button; 
        
        .lt-ie8 & { overflow: visible; }
    }
    input:valid, textarea:valid {  }
    button[disabled], input[disabled] { cursor: default; }
    input[type="checkbox"], input[type="radio"] { padding: 0; *width: 13px; *height: 13px; }
    input[type="search"] { -webkit-appearance: textfield; }
    input[type="search"]::-webkit-search-decoration, input[type="search"]::-webkit-search-cancel-button { -webkit-appearance: none; }
    
    .no-boxshadow input:invalid, .no-boxshadow textarea:invalid { background-color: #f0dddd; }
    .ie7 img { -ms-interpolation-mode: bicubic; }
        
    /* Aural rulesets */
    abbr.initialism { speak: spell-out; }
    abbr.truncation { speak: normal; }
    
    /* Stupid IE: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/ */
    @-ms-viewport{ width: device-width; }
    canvas { -ms-touch-action: double-tap-zoom; }
    svg:not(:root) { overflow: hidden; } /* fixes an issue in IE9 */
}


/* HTML5 Boilerplate Non-semantic helper classes */
@mixin html5boilerplate_helpers {
    
    /* For image replacement */
    .ir { display: block; text-indent: -9999px; overflow: hidden; background-repeat: no-repeat; text-align: left; direction: ltr; }
    
    /* Hide for both screenreaders and browsers. */
    .hidden { display: none; visibility: hidden; }
    
    /* Hide only visually, but have it available for screenreaders: by Jon Neal. */
    .screen-reader-text { border: 0; clip: rect(0 0 0 0); height: 1px; margin: -1px; overflow: hidden; padding: 0; position: absolute; width: 1px; }
    /* Extends the .screen-reader-text class to allow the element to be focusable when navigated to via the keyboard: drupal.org/node/897638 */
    .screen-reader-text.focusable:active,
    .screen-reader-text.focusable:focus { clip: auto; height: auto; margin: 0; overflow: visible; position: static; width: auto; }
    
    /* Hide visually and from screenreaders, but maintain layout */
    .invisible { visibility: hidden; }
    
    /* Need to hide from Screenreaders, but not from others? Use aria-hidden="true" on the element itself */
}

/* Add in the HTML5 Boilerplate rules for print (generic). Modify as needed. */
@mixin html5boilerplate_print {
    
    @media print {
        *, *:before, *:after {
            background: transparent !important;
            color: #000 !important; /* Black prints faster: h5bp.com/s */
            box-shadow: none !important;
            text-shadow: none !important;
        }
        
        body {
            font-size: 10pt; 
            line-height: 1.67; 
        }
        
        a, a:visited { text-decoration: underline !important; }
        
        *[role="main"] a[href]:after {
            content: " (" attr(href) ")";
            font-size: 75%; 
        }
        
        *[role="main"] abbr[title]:after {
            content: " (" attr(title) ")";
            font-size: 75%; 
        }
        
        .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after { content: ""; }
        
        pre, blockquote {
            border: 1px solid #999;
            page-break-inside: avoid;
        }
        
        thead { display: table-header-group; /* h5bp.com/t */ }
        
        tr, img { page-break-inside: avoid; }
        
        img { max-width: 100% !important; }
        
        @page { margin: 0.5cm; }
       
        p, h2, h3 {
            orphans: 3;
            widows: 3;
        }
        h1, h2, h3 { page-break-after: avoid; }
        
        /* Hide parts of the layout that overcomplicate paged output */
        .do-not-print, 
        .screen-reader-text, 
        .invisible, 
        .jump-to-menu, 
        .jump-link, 
        #site-map-link { display: none; }
        
        .say-no-more {
            display: inline; 
            visibility: visible; 
        }
        
        .blog-widget, 
        .event-widget {
                
            li { padding-left: 6em; }
        }
        
        .site-headline a {
            display: block; 
            
            .python-logo, .psf-logo { display: none; }
            /* Forces an image to be printed as if it were inline, not a background image */
            .python &:before { 
                width: 290px;
                height: 82px;
                content: image-url("python-logo_print.png"); 
            }
            .psf &:before { 
                width: 334px;
                height: 82px;
                content: image-url("psf-logo_print.png"); 
            }
        }
    }
    
}
